CREATING DATABASE:
CREATE DATABASE <database_name>(
id int auto_increment,
name varchar(24),
primary key (id)
);


CREATING TABLE:
CREATE TABLE <database_name>(
id int auto_increment,
name varchar(24),
primary key (id)
);

DISPLAY ALL INFO FROM CREATED TABLE SUCH AS FOREIGN KEY NAMES:
SHOW CREATE TABLE monty_family;

DROP FOREIGN KEY CONSTRAINT AFTER GETTING FOREIGN 
HIDDEN NAME FROM ABOVE COMMAND:
ALTER TABLE monty_family
DROP FOREIGN KEY `monty_family_ibfk_1`
'and then you could drop the column'
ALTER TABLE monty_family
DROP COLUMN cred_id

ALTER TABLE WITH NEW FOREIGN KEY:
ALTER TABLE credentials
ADD COLUMN key_to_monty_family int;

ALTER TABLE credentials
add foreign key (key_to_monty_family) references monty_family(prim_id);

ADDING COLUMN:
ALTER TABLE <table_name>
ADD COLUMN <column_name> int not null;



RENAMING:
ALTER TABLE <table_name>
RENAME COLUMN <old_name> TO <new_name>;

RENAMING TABLE <old_name> TO <new_name>;





CHANGING CONSTRAINT IN COLUMN:
ALTER TABLE <table_name>
MODIFY COLUMN <column name> varchar(24);

DEFAULT CONSTRAINT FOR A COLUMN:
ALTER TABLE <table_name>
MODIFY COLUMN varchar(24) DEFAULT '<what ever string>'




REPOSITIONING COLUMN:
ALTER TABLE <table_name>
MODIFY <column_name> varchar(24)
AFTER <name of column you want to place column>;
"or FIRST if you want it first"


UPDATE COLUMN WHERE CONSTRAINTS
UPDATE customer1 
SET phone_no='PHONE NO' 
WHERE cust_city='Torento';


DROP COLUMN:
ALTER TABLE <table_name>
DROP <column_name>;


UPDATE EXISTING ROW WITH WHERE CLAUSE
UPDATE `users`
SET `username` = 'Jack', `password` = '123'
WHERE `id` = 1


INSERTING ROW INTO TABLE:
INSERT INTO <table_name>
VALUES ("viphakone","monty",45.00,"1987-04-07");
"Need correct data type for constraints"
"DATE constraint formate = YYYY-MM-DD"

DELECT A ROW FROM TABLE:
DELETE FROM `table_name` [WHERE condition];

QUARYING TABLE WHERE LIKE WILDCARDS:
SELECT password, site FROM viphakone WHERE site LIKE '%america%'
'% = any number of characters, _ = on charater'
'example of _ is:'
SELECT password, site FROM viphakone WHERE site LIKE '%__eri%'
  
GET VALUES/DESCRIPTION FROM A TABLE WITH OUT LOOKING AT DATABASE
DESCRIBE <TABLE NAME>;

SELECT STATMEMENT WITH MATH INCLUDED IS POSSIBLE:
SELECT 
    first_name, 
    points / 50 
FROM customers

TO GET LIST OF DATABASES:
show databases;

QUARYING A COLUMN WHERE IN LIST OF VALUES:
SELECT * FROM <table name>
WHERE <column> IN ('','','');

ORDER BY MULTIPLE COLUMNS:
select * FROM employee
order BY sex, first_name, last_name

USING GROUP BY:
SELECT SUM(total_sales), client_id from works_with
GROUP BY client_id
'GROUP BY column outputs distinct results and 
SUM(total_sales) sums total sales of each GROUP BY
column'

USING GROUP BY WITH WHERE CLAUSE AND LIKE KEYWORD:
SELECT count(client_name), client_name as 'Count of LLC'
FROM client
WHERE client_name LIKE '%llc%'
GROUP BY client_name

USING UNION to combine two SELECT statements which consolidate into one column:
SELECT client_name from client
UNION
SELECT supplier_name from branch_supplier

USING JOIN TO QUARY FROM TWO TABLE ACCORDING PRIMARY AND FOREIGN KEYS:
SELECT employee.emp_id, employee.first_name, 
branch.branch_name,
branch.mgr_id
FROM employee
JOIN branch
WHERE employee.emp_id = branch.mgr_id;

USING NESTED QUARYS:
SELECT client.client_id , client.client_name
FROM client
WHERE client.client_id IN (
    select client_id 
    from works_with
    where emp_id = (
        SELECT emp_id 
        from employee
        WHERE first_name = 'michael'
    )
)
'us IN b/c inner statement results in a list'

NO DUPLICATES IN RESULT USE DISTINCT IN SELECT STATEMENT:
SELECT DISTINCT emp_id
FROM works_with
WHERE total_sales > 30000

